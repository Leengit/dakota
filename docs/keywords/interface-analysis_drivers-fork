Blurb::
Launch analysis drivers using fork command
Description::
The ``fork`` interface is the most common means by which Dakota
launches a separate application analysis process.

The ``fork`` interface is recommended over ``system`` for most analysis
drivers that are external to Dakota, i.e., any driver not linked in
via the ``direct`` interface.

As explained in the Users Manual, the parameters and results file
names are passed on the command line to the analysis driver(s).  If
input/output filters are specified, they will be run before/after the
analysis drivers.  The ``verbatim`` keyword is used to modify the
default driver/filter commands.

For additional information on invocation syntax, see the Interfaces
chapter of the Users Manual :cite:p:`UsersMan`.
Topics::

Examples::
Spawn (fork) an external executable/script called 'rosenbrock' which
reads variables from params.in and writes responses to results.out.
Preserve the analysis files for each function evaluation with tag and
save.


.. code-block::

    interface
      analysis_drivers = 'rosenbrock'
        fork
          parameters_file = 'params.in'
          results_file   = 'results.out'
          file_tag
          file_save


Theory::

Faq::

See_Also::
